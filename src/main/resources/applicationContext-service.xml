<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context.xsd   
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 0,创建文件类型解析器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--  指定上传的大小 -->
        <property name="maxUploadSize" value="10240000"></property>
    </bean>

    <!-- 1,创建数据源对象 -->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${mydriver}"></property>
        <property name="url" value="${myurl}"></property>
        <property name="username" value="${myname}"></property>
        <property name="password" value="${mypass}"></property>
        <property name="maxWait" value="${mywait}"></property>
        <property name="maxActive" value="${myactive}"></property>
    </bean>
    <!-- 2,创建SqlSessionFactory工厂对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations" value="classpath:com/mhg/mapper/*Mapper.xml"></property>
        <!-- 加载mybatis的核心配置文件 -->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"></property>-->
        <!-- 配置分页插件 -->
        <property name="plugins">
            <array>
                <!--这里需要的是实现类的对象 -->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!-- 需要指定数据库的方言 -->
                    <property name="properties">
                        <props>
                            <prop key="helperDialect">mysql</prop>
                        </props>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!-- 3,创建持久层DAO对象，这里使用DAO-mapper扫描-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mhg.dao"></property>
    </bean>
    <!-- 4,创建服务层对象，这里使用扫描 -->
    <context:component-scan base-package="com.mhg.service"></context:component-scan>
    <!-- 5,创建事务管理通知对象 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--*********shiro权限验证框架**********-->

    <!--注册安全管理器-->
    <!--在安全管理器中注入自定义的realm-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--注入realm到安全管理器进行密码匹配-->
        <property name="realm" ref="FirstRealm"></property>
    </bean>
    <!--自定义的realm-->
    <bean id="FirstRealm" class="com.mhg.realm.FirstRealm"></bean>
    <!--*******************************************************-->
    <!--配置登出过滤器-->
    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/login.jsp" />
    </bean>

    <!--配置一个shiro框架的过滤器工厂bean,用于创建shiro框架的过滤器-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--注入安全管理器对象-->
        <property name="securityManager" ref="securityManager"/>
        <!--注入登录页面访问URL-->
        <property name="loginUrl" value="/login.jsp"/>
        <!--注入权限不足提供页面访问URL-->
        <property name="unauthorizedUrl" value="/test.jsp"/>
        <!--加入登出过滤器-->
        <property name="filters">
            <map>
                <entry key="logout" value-ref="logoutFilter" />
            </map>
        </property>
        <!--已经登录，但是用户没有权限的时候才跳转-->
           <!--配置URL拦截规则-->
           <property name="filterChainDefinitions">
               <value>
                   /css/** = anon
                   /easyui/** = anon
                   /img/** = anon
                   /jqueryvideo/** = anon
                   /js/** = anon
                   /kindeditor/** = anon
                   /Scripts/** = anon
                   /video/** = anon
                   /login.jsp* = anon
                   /syslogin.do = anon
                   /save.do = roles["admin"]
                   /logout.do = logout
                   /** = authc<!--其他设置用户认证才能使用-->
               </value>
           </property>
    </bean>

    <!--**********************************-->

    <!-- 6,AOP编程 -->
    <!-- 6.1 事务切面 -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 6.2全自动AOP -->
    <aop:config>
        <aop:pointcut id="mypoint" expression="execution(* com.mhg.service.*.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="myAdvice" pointcut-ref="mypoint"></aop:advisor>
    </aop:config>

</beans>
